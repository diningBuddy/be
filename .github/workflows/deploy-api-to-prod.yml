name: Deploy API To Prod

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew

      - name: Make Prod1 Yml
        run: |
          cd ./src/main/resources
          touch ./application-prod1.yml
          echo "${{ secrets.PROPERTIES_PROD1 }}" > ./application-prod1.yml
        shell: bash

      - name: Make Prod2 Yml
        run: |
          cd ./src/main/resources
          touch ./application-prod2.yml
          echo "${{ secrets.PROPERTIES_PROD2 }}" > ./application-prod2.yml

      - name: Build With Gradle
        run: ./gradlew bootJar -x test

      - name: Docker Build And Push
        run: |
          echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
          docker buildx build --platform linux/amd64,linux/arm64 -f docker/api.Dockerfile -t camelia9999/diningbuddy:be --push .
      - name: Debug SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > debug_key
          cat debug_key | wc -l  # 줄 수 확인
          head -n 1 debug_key    # 첫 줄 확인
          tail -n 1 debug_key    # 마지막 줄 확인
        shell: bash
      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST_PUBLIC_IP }}
          username: ${{ secrets.HOST_USER_NAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "docker/docker-compose.yml"
          target: "~/app/"
      - name: Deploy to OCI
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.HOST_PUBLIC_IP }}
          username: ${{secrets.HOST_USER_NAME}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd ~/app/docker
            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
            docker pull camelia9999/diningbuddy:be
            export AWS_ACCESS_KEY='${{ secrets.AWS_ACCESS_KEY }}'
            export AWS_SECRET_KEY='${{ secrets.AWS_SECRET_KEY }}'
            echo "> 구동중인 Profile 확인"
            CURRENT_PROFILE=$(curl -s http://localhost/profile)
            echo "> $CURRENT_PROFILE"
            
            if [ "$CURRENT_PROFILE" == "prod1" ]
            then
              IDLE_PROFILE=prod2
              IDLE_SERVICE=skku-api-2
              IDLE_PORT=8082
            elif [ "$CURRENT_PROFILE" == "prod2" ]
            then
              IDLE_PROFILE=prod1
              IDLE_SERVICE=skku-api-1
              IDLE_PORT=8081
            else
              echo "> 일치하는 Profile이 없음."
              IDLE_PROFILE=prod1
              IDLE_SERVICE=skku-api-1
              IDLE_PORT=8081
            fi
            
            echo "> ${IDLE_PROFILE} 배포"
            docker-compose up -d $IDLE_SERVICE
            
            echo "> 사용하지 않는 Docker Image 삭제" 
            docker image prune -f
            
            sleep 60
            
            echo "> 전환"
            echo "set \$service_url http://127.0.0.1:${IDLE_PORT};" | sudo tee /etc/nginx/conf.d/service-url.inc
            sudo service nginx reload
